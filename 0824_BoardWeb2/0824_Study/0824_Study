// 조인 포인트 : 공통 관심사를 적용 할 수 있는 후보들 (대상이 될 수 있는 메소드들)
	// 포인트 컷 : 실직적으로 공통 관심사를 적용 받는 대상 메소드들
	조인포인트 중. 포인트 컷.
	
// 표현식
	// biz하위 클래스 중 Impl로 끝나는 클래스의 모든 메소드가 대상이 된다.
	execution(* com.springbook.biz..*Impl.*(..))
	
	// Impl로 끝나는 클래스의 get으로 시작하는 메소드가 대상이 됨.
	execution(* com.springbook.biz..*Impl.get*(..))" id="getPointcut"/>
	
// Pointcut의 표현식
	// ex)
	execution(	  *		com.springbook.biz..	*Impl.	get*(..))
				리턴타입		패키지 경로				클래스명	메소드명/매개변수
	// 리턴타입 
		*		: 모든 리턴타입
		void 	
		!void
		 
	// 패키지 표현식
		com.springbook.biz		: 해당 패키지만 대상
		com.springbook.biz..	: 해당 패키지로 시작하는 모든 (하위) 패키지
		com.springbook.biz..Impl : 해당 패키지로 시작하면서 마지막 패키지 이름이 Impl로 끝나는 패키지
		
	// 클래스 표현식   
		BoardServiceImpl : 해당 클래스만 대상
		*Impl			 : Impl로 끝나는 클래스
		BoardService+	 : 해당 클래스로부터 파생되는 자식 클래스가 대상
		
	// 메소드 표현식
		*(..)		: 모든 메소드
		get*(..) 	: get으로 시작하는 모든 메소드
		
	// 매개변수 표현식
		(..)	: 개수, 타입 제약없음
		(*)		: 반드시 1개의 매개변수를 가지는 메소드
		(com.springbokk.user.UserVO)	: UserVO 타입의 매개변수
		(!com.springbokk.user.UserVO)	: UserVO가 아닌 타입의 매개변수 (not)
		(Integer,..)	: 한 개 이상의 매개변수를 가지는 메소드
		(Integer, *)	: 반드시 두 개의 매개변수를 가지는 메소드
	
// Advice : 공통 관심사에 해당하는 기능의 코드를 의미
	// Advice의 동작 시점 
	// ex) <aop:after method=""
		before			: pointcut의 동작 전
		after			: pointcut의 동작 후 (예외 발생 여부에 상관없이 무조건 수행되는 어드바이스)
		after-returning	: pointcut이 성공적으로 동작하고 리턴되면 실행
		after-throwing	: pointcut이 예외가 발생하면 실행 
		around			: pointcut의 동작 전/후 (2번 실행)
	// pointcut-ref 속성으로 pointcut이 될 메소드를 지정.
	
// Weaving(위빙) : pointcut의 대상 메소드에 Advice의 메소드가 삽입 되는 것

// Aspect of Advisor 
	< aop:aspect : Pointcut에 Advice를 연결
	// Pointcut + Advice



=================================================================================================
비지니스 컴포넌트

 @ (이노테이션) + ("id값") : 역할에 따라 구분. 기능은 다 같음
 
xxxxVO
xxxxDAO
xxxxService // VMC 중 M 과같음 (DAO) // Interface 로 처리
xxxxServiceimpl // ActionController 와 같음 (Controll) // DAO를 사용

	//	@Autowired // 자동 (의존) 주입	//타입으로 구분  /apple, sony 두개의 speaker 타입이 존재해 오류 발생
	//	@Qualifier("apple") // 한정자
	//	@Resource(name="sony") // 한정, 의존 주입 


// AOP 관련 어노테이션
	*Aspect
	*Pointcut
	*Before				: pointcut의 동작 전
	*AfterReturning		: pointcut이 성공적으로 동작하고 리턴되면 실행			
	*AfterThrowing		: pointcut이 예외가 발생하면 실행 
	*After				: pointcut의 동작 후 (예외 발생 여부에 상관없이 무조건 수행되는 어드바이스)
	*Around				: pointcut의 동작 전/후 (2번 실행)


*Spring JDBC
	**spring-jdbc
	**commons-dbcp

*<bean>등록
	*database.properties
	
	*jdbcTempate
		*method					쿼리 역할
		
		*update(...)		// insert,update,delete 역할
		*queryForInt(...) 	// select 역할	
		*queryForObject(...) // select 역할 / 하나의 객체(Object) 결과 값이 나올 때 사용하는 메소드(객체 그대로 반환)
		*query(...)			 // select 역할  / 여러목록을 조회할 때 사용 (List로 반환해준다)















